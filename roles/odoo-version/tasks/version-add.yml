- fail: msg="'version' is mandatory"
  when: version is undefined or not version

# virtual env

- name: Create a Virtualenv for {{ version }}
  shell: "python3 -m venv /home/{{ odoo_user }}/venvs/odoo-{{ version }}-venv"

- name: Update pip version in venv
  pip:
    name: pip
    virtualenv: /home/{{ odoo_user }}/venvs/odoo-{{ version }}-venv
    state: latest

- name: Install wheel in venv for {{ version }}
  pip:
    name: wheel
    virtualenv: /home/{{ odoo_user }}/venvs/odoo-{{ version }}-venv

- name: Install deps in venv for {{ version }}
  pip:
    requirements: /home/{{ odoo_user }}/src/odoo/{{ version }}/requirements.txt
    virtualenv: /home/{{ odoo_user }}/venvs/odoo-{{ version }}-venv

# source code

- name: Chekcout Odoo Source {{ version }}
  include_role:
    name: odoo-checkout-source
  vars:
    version: "{{ version }}"

# odoo server conf file

- name: "Extract config for Odoo {{ version }}"
  shell:
    cmd: python3 /home/{{ odoo_user }}/bin/odoo_get_config.py {{ version }} /home/{{ odoo_user }}/src/
  register: raw_config

- name: "Transform config into JSON"
  set_fact:
    config: "{{ raw_config.stdout | from_json }}"

- name: "Create Odoo conf file"
  template:
    src: 'templates/odoo-conf.j2'
    dest: '/home/{{ odoo_user }}/conf/odoo-{{ version }}.conf'
    owner: "{{ odoo_user }}"
    group: "{{ odoo_user }}"
    mode: '0644'
    force: yes
  vars:
    version: "{{ version }}"
    addons_path_list: "{{ config['addons_path'] }}"
    # database
    db_maxconn:  "{{ config['db_maxconn'] }}"
    without_demo:  "{{ config['without_demo'] }}"
    unaccent: yes  # TODO activate psql extension
    # hardware
    limit_time_cpu:  "{{ config['limit_time_cpu'] }}"
    limit_time_real:  "{{ config['limit_time_real'] }}"
    # thread
    proxy_mode: yes
    max_cron_threads:  "{{ config['max_cron_threads'] }}"
    workers:  "{{ config['workers'] }}"
    # db filter
    list_db: "{{ config['list_db'] }}"
    dbfilter:  "{{ config['dbfilter'] }}"
    # ports
    xmlrpc_interface:  "{{ config['xmlrpc_interface'] }}"
    xmlrpc_port: "{{ config['xmlrpc_port'] }}"
    xmlrpcs_interface:  "{{ config['xmlrpcs_interface'] }}"
    xmlrpcs_port:  "{{ config['xmlrpcs_port'] }}"
    longpolling_port:  "{{ config['longpolling_port'] }}"
    # logging
    log_db: no
    log_level: 'info'
    logfile: '/home/{{ odoo_user }}/log/odoo-{{ version }}.log'
    # various
    geoip_database: '/usr/share/GeoIP/GeoLite2-City.mmdb'  # TODO install it in setup script
    server_wide_modules: 'base,web,cloud_worker'

# odoo service

- name: Check if Odoo Service {{ version }} already exists
  stat:
    path: '/etc/systemd/system/odoo-{{ version }}.service'
  register: stat_result

- name: "Create service file"
  become: yes
  template:
    src: 'templates/odoo-service-venv.j2'
    dest: '/etc/systemd/system/odoo-{{ version }}.service'
    owner: 'root'
    group: 'root'
    mode: '0644'
    force: yes

- name: Reload systemctl daemon as service file might have change
  systemd:
    daemon_reload: yes

- name: Enable service Odoo
  service:
    name: odoo-{{ version }}
    enabled: yes

- name: Start Odoo Service {{ version }}
  service:
    name: odoo-{{ version }}
    state: started
  when: not stat_result.stat.exists

- name: Restart Odoo Service {{ version }}
  service:
    name: odoo-{{ version }}
    state: restarted
  when: stat_result.stat.exists

# add in metabase

- name: "Metabase: Check if {{ version }} exits"
  community.general.postgresql_query:
    db: meta
    query: SELECT * FROM odoo_version WHERE version = %(version)s
    named_args:
      version: "{{ version }}"
    login_user: root
  register: result_meta

- name: "Extract config for Odoo {{ version }}"
  shell:
    cmd: python3 /home/{{ odoo_user }}/bin/odoo_get_config.py {{ version }} /home/{{ odoo_user }}/src/
  register: raw_config

- name: "Transform config into JSON"
  set_fact:
    config: "{{ raw_config.stdout | from_json }}"

- name: "Metabase: Insert Odoo {{ version }} in metabase"
  community.general.postgresql_query:
    db: meta
    login_user: root
    query: INSERT INTO odoo_version (version, port, longpolling_port) VALUES (%(version)s, %(port)s, %(longpolling_port)s)
    named_args:
      version: "{{ version }}"
      port: "{{ config['xmlrpcs_port'] }}"
      longpolling_port: "{{ config['longpolling_port'] }}"
  when: not result_meta.rowcount
